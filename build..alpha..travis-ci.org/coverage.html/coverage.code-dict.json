{"/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/test.js":"/* istanbul instrument in package npmtest_gulp_css_spriter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/lib.npmtest_gulp_css_spriter.js":"/* istanbul instrument in package npmtest_gulp_css_spriter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_css_spriter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_css_spriter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-css-spriter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_css_spriter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_css_spriter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_css_spriter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_css_spriter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_css_spriter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_css_spriter.__dirname + '/lib.npmtest_gulp_css_spriter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/index.js":"// gulp-css-spriter: https://www.npmjs.com/package/gulp-css-spriter\r\n// Sprite Sheet Generation from CSS source files.\r\n//\r\n// By: Eric Eastwood: EricEastwood.com\r\n//\r\n// Meta info looks like: `/* @meta {\"spritesheet\": {\"include\": false}} */`\r\n\r\nvar fs = require('fs-extra');\r\nvar path = require('path');\r\n\r\nvar Promise = require('bluebird');\r\nvar outputFile = Promise.promisify(fs.outputFile);\r\nvar stat = Promise.promisify(fs.stat);\r\n\r\nvar through = require('through2');\r\nvar extend = require('extend')\r\nvar gutil = require('gulp-util');\r\n\r\nvar css = require('css');\r\nvar spritesmith = require('spritesmith');\r\nvar spritesmithBuild = Promise.promisify(spritesmith);\r\n\r\n\r\nvar spriterUtil = require('./lib/spriter-util');\r\nvar getBackgroundImageDeclarations = require('./lib/get-background-image-declarations');\r\nvar transformFileWithSpriteSheetData = require('./lib/transform-file-with-sprite-sheet-data');\r\n\r\n\r\n\r\n\r\n\r\n// consts\r\nconst PLUGIN_NAME = 'gulp-css-spriter';\r\n\r\n\r\nvar spriter = function(options) {\r\n\r\n\tvar defaults = {\r\n\t\t// ('implicit'|'explicit')\r\n\t\t'includeMode': 'implicit',\r\n\t\t// The path and file name of where we will save the sprite sheet\r\n\t\t'spriteSheet': 'spritesheet.png',\r\n\t\t// Because we don't know where you will end up saving the CSS file at this point in the pipe,\r\n\t\t// we need a litle help identifying where it will be.\r\n\t\t'pathToSpriteSheetFromCSS': 'spritesheet.png',\r\n\t\t// Same as the spritesmith callback `function(err, result)`\r\n\t\t// result.image: Binary string representation of image\r\n\t\t// result.coordinates: Object mapping filename to {x, y, width, height} of image\r\n\t\t// result.properties: Object with metadata about spritesheet {width, height}\r\n\t\t'spriteSheetBuildCallback': null,\r\n\t\t// If true, we ignore any images that are not found on disk\r\n\t\t// Note: this plugin will still emit an error if you do not verify that the images exist\r\n\t\t'silent': true,\r\n\t\t// Check to make sure each image declared in the CSS exists before passing it to the spriter.\r\n\t\t// Although silenced by default(`options.silent`), if an image is not found, an error is thrown.\r\n\t\t'shouldVerifyImagesExist': true,\r\n\t\t// Any option you pass in here, will be passed through to spritesmith\r\n\t\t// https://www.npmjs.com/package/spritesmith#-spritesmith-params-callback-\r\n\t\t'spritesmithOptions': {},\r\n\t\t// Used to format output CSS\r\n\t\t// You should be using a separate beautifier plugin\r\n\t\t'outputIndent': '\\t'\r\n\t};\r\n\r\n\tvar settings = extend({}, defaults, options);\r\n\r\n\t// Keep track of all the chunks that come in so that we can re-emit in the flush\r\n\tvar chunkList = [];\r\n\t// We use an object for imageMap so we don't get any duplicates\r\n\tvar imageMap = {};\r\n\t// Check to make sure all of the images exist(`options.shouldVerifyImagesExist`) before trying to sprite them\r\n\tvar imagePromiseArray = [];\r\n\r\n\tvar stream = through.obj(function(chunk, enc, cb) {\r\n\t\t// http://nodejs.org/docs/latest/api/stream.html#stream_transform_transform_chunk_encoding_callback\r\n\t\t//console.log('transform');\r\n\r\n\t\t// Each `chunk` is a vinyl file: https://www.npmjs.com/package/vinyl\r\n\t\t// chunk.cwd\r\n\t\t// chunk.base\r\n\t\t// chunk.path\r\n\t\t// chunk.contents\r\n\r\n\r\n\t\tif (chunk.isStream()) {\r\n\t\t\tself.emit('error', new gutil.PluginError(PLUGIN_NAME, 'Cannot operate on stream'));\r\n\t\t}\r\n\t\telse if (chunk.isBuffer()) {\r\n\t\t\tvar contents = String(chunk.contents);\r\n\r\n\t\t\tvar styles;\r\n\t\t\ttry {\r\n\t\t\t\tstyles = css.parse(contents, {\r\n\t\t\t\t\t'silent': settings.silent,\r\n\t\t\t\t\t'source': chunk.path\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tcatch(err) {\r\n\t\t\t\terr.message = 'Something went wrong when parsing the CSS: ' + err.message;\r\n\t\t\t\tself.emit('log', err.message);\r\n\r\n\t\t\t\t// Emit an error if necessary\r\n\t\t\t\tif(!settings.silent) {\r\n\t\t\t\t\tself.emit('error', err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Gather a list of all of the image declarations\r\n\t\t\tvar chunkBackgroundImageDeclarations = getBackgroundImageDeclarations(styles, settings.includeMode);\r\n\r\n\r\n\t\t\t// Go through each declaration and gather the image paths\r\n\t\t\t// We find the new images that we found in this chunk verify they exist below\r\n\t\t\t//\t\tWe use an object so we don't get any duplicates\r\n\t\t\tvar newImagesfFromChunkMap = {};\r\n\t\t\tvar backgroundURLMatchAllRegex = new RegExp(spriterUtil.backgroundURLRegex.source, \"gi\");\r\n\t\t\tchunkBackgroundImageDeclarations.forEach(function(declaration) {\r\n\r\n\t\t\t\t// Match each background image in the declaration (there could be multiple background images per value)\r\n\t\t\t\tspriterUtil.matchBackgroundImages(declaration.value, function(imagePath) {\r\n\t\t\t\t\timagePath = path.join(path.dirname(chunk.path), imagePath);\r\n\r\n\t\t\t\t\t// If not already in the overall list of images collected\r\n\t\t\t\t\t// Add to the queue/list of images to be verified\r\n\t\t\t\t\tif(!imageMap[imagePath]) {\r\n\t\t\t\t\t\tnewImagesfFromChunkMap[imagePath] = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Add it to the main overall list to keep track\r\n\t\t\t\t\timageMap[imagePath] = true;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// Filter out any images that do not exist depending on `settings.shouldVerifyImagesExist`\r\n\t\t\tObject.keys(newImagesfFromChunkMap).forEach(function(imagePath) {\r\n\t\t\t\tvar filePromise;\r\n\t\t\t\tif(settings.shouldVerifyImagesExist) {\r\n\t\t\t\t\tfilePromise = stat(imagePath).then(function() {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdoesExist: true,\r\n\t\t\t\t\t\t\tpath: imagePath\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}, function() {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdoesExist: false,\r\n\t\t\t\t\t\t\tpath: imagePath\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// If they don't want us to verify it exists, just pass it on with a undefined `doesExist` property\r\n\t\t\t\t\tfilePromise = Promise.resolve({\r\n\t\t\t\t\t\tdoesExist: undefined,\r\n\t\t\t\t\t\tpath: imagePath\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\timagePromiseArray.push(filePromise);\r\n\t\t\t});\r\n\r\n\r\n\t\t\t// Keep track of each chunk and what declarations go with it\r\n\t\t\t// Because the positions/line numbers pertain to that chunk only\r\n\t\t\tchunkList.push(chunk);\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// \"call callback when the transform operation is complete.\"\r\n\t\tcb();\r\n\r\n\t}, function(cb) {\r\n\t\t// http://nodejs.org/docs/latest/api/stream.html#stream_transform_flush_callback\r\n\t\t//console.log('flush');\r\n\t\tvar self = this;\r\n\r\n\t\t// Create an verified image list when all of the async checks have finished\r\n\t\tvar imagesVerifiedPromise = Promise.settle(imagePromiseArray).then(function(results) {\r\n\t\t\tvar imageList = [];\r\n\t\t\tArray.prototype.forEach.call(results, function(result) {\r\n\t\t\t\timageInfo = result.value();\r\n\r\n\t\t\t\tif(imageInfo.doesExist === true || imageInfo.doesExist === undefined) {\r\n\t\t\t\t\timageList.push(imageInfo.path);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Tell them that we could not find the image\r\n\t\t\t\t\tvar logMessage = 'Image could not be found: ' + imageInfo.path;\r\n\t\t\t\t\tself.emit('log', logMessage);\r\n\r\n\t\t\t\t\t// Emit an error if necessary\r\n\t\t\t\t\tif(!settings.silent) {\r\n\t\t\t\t\t\tself.emit('error', new Error(logMessage));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn imageList;\r\n\t\t});\r\n\r\n\r\n\t\t// Start spriting once we know the true list of images that exist\r\n\t\timagesVerifiedPromise.then(function(imageList) {\r\n\r\n\t\t\t// Generate the spritesheet\r\n\t\t\tvar spritesmithOptions = extend({}, settings.spritesmithOptions, { src: imageList });\r\n\t\t\t\r\n\t\t\tvar spriteSmithBuildPromise = spritesmithBuild(spritesmithOptions);\r\n\r\n\t\t\tspriteSmithBuildPromise.then(function(result) {\r\n\r\n\t\t\t\tvar whenImageDealtWithPromise = new Promise(function(resolve, reject) {\r\n\t\t\t\t\t// Save out the spritesheet image\r\n\t\t\t\t\tif(settings.spriteSheet) {\r\n\t\t\t\t\t\tvar spriteSheetSavedPromise = outputFile(settings.spriteSheet, result.image, 'binary').then(function() {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//console.log(\"The file was saved!\");\r\n\r\n\t\t\t\t\t\t\t// Push all of the chunks back on the pipe\r\n\t\t\t\t\t\t\tchunkList.forEach(function(chunk) {\r\n\r\n\t\t\t\t\t\t\t\tvar transformedChunk = chunk.clone();\r\n\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\ttransformedChunk = transformFileWithSpriteSheetData(transformedChunk, result.coordinates, settings.pathToSpriteSheetFromCSS, settings.includeMode, settings.silent, settings.outputIndent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcatch(err) {\r\n\t\t\t\t\t\t\t\t\terr.message = 'Something went wrong when transforming chunks: ' + err.message;\r\n\t\t\t\t\t\t\t\t\tself.emit('log', err.message);\r\n\r\n\t\t\t\t\t\t\t\t\t// Emit an error if necessary\r\n\t\t\t\t\t\t\t\t\tif(!settings.silent) {\r\n\t\t\t\t\t\t\t\t\t\tself.emit('error', err);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\t\t\t// Attach the spritesheet in case someone wants to use it down the pipe\r\n\t\t\t\t\t\t\t\ttransformedChunk.spritesheet = result.image;\r\n\r\n\t\t\t\t\t\t\t\t// Push it back on the main pipe\r\n\t\t\t\t\t\t\t\tself.push(transformedChunk);\r\n\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t}).catch(function(err) {\r\n\t\t\t\t\t\t\tsettings.spriteSheetBuildCallback(err, null);\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\tspriteSheetSavedPromise.then(function() {\r\n\r\n\t\t\t\t\t\t\t// Call a callback from the settings the user can hook onto\r\n\t\t\t\t\t\t\tif(settings.spriteSheetBuildCallback) {\r\n\t\t\t\t\t\t\t\tsettings.spriteSheetBuildCallback(null, result);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\twhenImageDealtWithPromise.finally(function() {\r\n\t\t\t\t\t// \"call callback when the flush operation is complete.\"\r\n\t\t\t\t\tcb();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t\r\n\t\t\t}, function(err) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\terr.message = 'Error creating sprite sheet image:\\n' + err.message;\r\n\t\t\t\t\tself.emit('error', new gutil.PluginError(PLUGIN_NAME, err));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t});\r\n\r\n\r\n\r\n\t\t\r\n\r\n\t});\r\n\r\n\t// returning the file stream\r\n\treturn stream;\r\n};\r\n\r\n\r\nmodule.exports = spriter;","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/spriter-util.js":"\r\nvar backgroundURLRegex = (/(.*?url\\([\"\\']?)(.*?\\.(?:png|jpg|gif))([\"\\']?\\).*?;?)/i);\r\n\r\n\r\nfunction matchBackgroundImages(declarationValue, cb) {\r\n\tvar backgroundURLMatchAllRegex = new RegExp(backgroundURLRegex.source, \"gi\");\r\n\r\n\treturn declarationValue.replace(backgroundURLMatchAllRegex, function(match, p1, p2, p3, offset, string) {\r\n\t\tvar imagePath = p2;\r\n\r\n\t\treturn p1 + cb(imagePath) + p3;\r\n\t});\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n\t'backgroundURLRegex': backgroundURLRegex,\r\n\t'matchBackgroundImages':matchBackgroundImages\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/get-background-image-declarations.js":"\r\nvar mapOverStylesAndTransformBackgroundImageDeclarations = require('./map-over-styles-and-transform-background-image-declarations');\r\n\r\n\r\n// Pass in a styles object from `css.parse`\r\n// See main module for `includeMode` values\r\nfunction getBackgroundImageDeclarations(styles, includeMode) {\r\n\tincludeMode = includeMode || 'implicit';\r\n\t\r\n\t// First get all of the background image declarations\r\n\tvar backgroundImageDeclarations = [];\r\n\tmapOverStylesAndTransformBackgroundImageDeclarations(styles, includeMode, function(declaration) {\r\n\t\tbackgroundImageDeclarations.push(declaration);\r\n\t});\r\n\r\n\treturn backgroundImageDeclarations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = getBackgroundImageDeclarations;","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/map-over-styles-and-transform-background-image-declarations.js":"var extend = require('extend');\r\n\r\nvar spriterUtil = require('./spriter-util');\r\nvar getMetaInfoForDeclaration = require('./get-meta-info-for-declaration');\r\nvar transformMap = require('./transform-map');\r\n\r\n\r\n\r\nfunction mapOverStylesAndTransformBackgroundImageDeclarations(styles, includeMode, cb) {\r\n\t// Map over all\r\n\treturn mapOverStylesAndTransformAllBackgroundImageDeclarations(styles, function(declaration) {\r\n\t\t// Then filter down to only the proper ones (according to their meta data)\r\n\t\tif(shouldIncludeFactoringInMetaData(declaration.meta, includeMode)) {\r\n\t\t\treturn cb.apply(null, arguments);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Boolean function to determine if the meta data permits using this declaration\r\nfunction shouldIncludeFactoringInMetaData(meta, includeMode) {\r\n\tvar metaIncludeValue = (meta && meta.spritesheet && meta.spritesheet.include);\r\n\tvar shouldIncludeBecauseImplicit = includeMode === 'implicit' && (metaIncludeValue === undefined || metaIncludeValue);\r\n\tvar shouldIncludeBecauseExplicit = includeMode === 'explicit' && metaIncludeValue;\r\n\tvar shouldInclude = shouldIncludeBecauseImplicit || shouldIncludeBecauseExplicit;\r\n\r\n\t// Only return declartions that shouldn't be skipped\r\n\treturn shouldInclude;\r\n}\r\n\r\n\r\n\r\n// Pass in a styles object from `css.parse`\r\n// Loop over all of the styles and transform/modify the background image declarations\r\n// Returns a new styles object that has the transformed declarations\r\nfunction mapOverStylesAndTransformAllBackgroundImageDeclarations(styles, cb) {\r\n\r\n\tfunction transformDeclaration(declaration, declarationIndex, declarations) {\r\n\t\t// Clone the declartion to keep it immutable\r\n\t\tvar transformedDeclaration = extend(true, {}, declaration);\r\n\t\ttransformedDeclaration = attachInfoToDeclaration(declarations, declarationIndex);\r\n\r\n\t\t// background-image always has a url\r\n\t\tif(transformedDeclaration.property === 'background-image') {\r\n\t\t\treturn cb(transformedDeclaration, declarationIndex, declarations);\r\n\t\t}\r\n\t\t// Background is a shorthand property so make sure `url()` is in there\r\n\t\telse if(transformedDeclaration.property === 'background') {\r\n\t\t\tvar hasImageValue = spriterUtil.backgroundURLRegex.test(transformedDeclaration.value);\r\n\r\n\t\t\tif(hasImageValue) {\r\n\t\t\t\treturn cb(transformedDeclaration, declarationIndex, declarations);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Wrap in an object so that the declaration doesn't get interpreted\r\n\t\treturn {\r\n\t\t\t'value': transformedDeclaration\r\n\t\t};\r\n\t}\r\n\r\n\t// Clone the declartion to keep it immutable\r\n\tvar transformedStyles = extend(true, {}, styles);\r\n\r\n\t// Go over each background `url()` declarations\r\n\ttransformedStyles.stylesheet.rules.map(function(rule, ruleIndex) {\r\n\t\tif(rule.type === 'rule') {\r\n\t\t\trule.declarations = transformMap(rule.declarations, transformDeclaration);\r\n\t\t}\r\n\r\n\t\tif(rule.type === 'keyframes') {\r\n\t\t\t// Get keyframe from keyframes\r\n\t\t\trule.keyframes = transformMap(rule.keyframes, function(keyframe, keyframeIndex, keyframes) {\r\n\t\t\t\t// Get declarations from keyframe\r\n\t\t\t\tkeyframe.declarations = transformMap(keyframe.declarations, transformDeclaration);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn rule;\r\n\t});\r\n\r\n\treturn transformedStyles;\r\n}\r\n\r\n// We do NOT directly modify the declaration in the rule\r\n// We pass the whole rule and current index so we can properly look at the metaData around each declaration\r\n// and add it to the declaration\r\nfunction attachInfoToDeclaration(declarations, declarationIndex)\r\n{\r\n\tif(declarations.length > declarationIndex) {\r\n\t\t// Clone the declartion to keep it immutable\r\n\t\tvar declaration = extend(true, {}, declarations[declarationIndex]);\r\n\r\n\t\tvar declarationMetaInfo = getMetaInfoForDeclaration(declarations, declarationIndex);\r\n\r\n\t\t// Add the meta into to the declaration\r\n\t\tdeclaration.meta = extend(true, {}, declaration.meta, declarationMetaInfo);\r\n\r\n\t\treturn declaration;\r\n\t}\r\n\r\n\treturn null;\r\n}\r\n\r\n\r\n\r\nmodule.exports = mapOverStylesAndTransformBackgroundImageDeclarations;\r\n","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/get-meta-info-for-declaration.js":"var extend = require('extend');\r\n\r\n\r\nfunction getMetaInfoForDeclaration(declarations, declarationIndex) {\r\n\tvar resultantMetaData = {};\r\n\r\n\tif(declarationIndex > 0 && declarationIndex < declarations.length) {\r\n\t\tvar mainDeclaration = declarations[declarationIndex];\r\n\t\tif(mainDeclaration) {\r\n\r\n\t\t\t// Meta data can exist before or on the same line as the declaration.\r\n\t\t\t// Both Meta blocks are valid for the background property\r\n\t\t\t// ex.\r\n\t\t\t// /* @meta {\"spritesheet\": {\"include\": false}} */\r\n\t\t\t// background: url('../images/aenean-purple.png'); /* @meta {\"sprite\": {\"skip\": true}} */\r\n\t\t\tvar beforeDeclaration = declarations[declarationIndex-1];\r\n\t\t\tvar afterDeclaration = declarations[declarationIndex+1];\r\n\r\n\r\n\t\t\tif(beforeDeclaration) {\r\n\t\t\t\t// The before declaration should be valid no matter what (even if multiple lines above)\r\n\t\t\t\t// The parse function does all the nice checking for us\r\n\t\t\t\textend(resultantMetaData, parseCommentDecarationForMeta(beforeDeclaration));\r\n\t\t\t}\r\n\r\n\t\t\tif(afterDeclaration) {\r\n\t\t\t\t//console.log(mainDeclaration);\r\n\t\t\t\t//console.log(afterDeclaration);\r\n\t\t\t\t//console.log(afterDeclaration.position.start.line, mainDeclaration.position.start.line);\r\n\t\t\t\t// Make sure that the comment starts on the same line as the main declaration\r\n\t\t\t\tif((((afterDeclaration || {}).position || {}).start || {}).line === (((mainDeclaration || {}).position || {}).start || {}).line) {\r\n\t\t\t\t\textend(resultantMetaData, parseCommentDecarationForMeta(afterDeclaration));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn resultantMetaData;\r\n}\r\n\r\nfunction parseCommentDecarationForMeta(declaration) {\r\n\tif(declaration.type === \"comment\") {\r\n\t\t//console.log(declaration);\r\n\r\n\t\tvar metaMatches = declaration.comment.match(/@meta\\s*({.*?}(?!}))/);\r\n\r\n\t\tif(metaMatches) {\r\n\t\t\tvar parsedMeta = {};\r\n\t\t\ttry {\r\n\t\t\t\tparsedMeta = JSON.parse(metaMatches[1]);\r\n\t\t\t}\r\n\t\t\tcatch(e) {\r\n\t\t\t\t//console.warn('Meta info was found but failed was not valid JSON');\r\n\t\t\t}\r\n\r\n\t\t\treturn parsedMeta;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\nmodule.exports = getMetaInfoForDeclaration;","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/transform-map.js":"var extend = require('extend');\r\n\r\nfunction transformMap(arr, cb) {\r\n\tvar resultantArray = extend(true, [], arr);\r\n\r\n\tfor(var i = 0; i < resultantArray.length; i++) {\r\n\t\tvar el = resultantArray[i];\r\n\t\t\r\n\t\tvar result = cb(el, i, resultantArray);\r\n\t\t\r\n\t\tvar defaults = {\r\n\t\t\tvalue: el,\r\n\t\t\tinsertElements: [],\r\n\t\t\tappendElements: []\r\n\t\t};\r\n\t\t\r\n\t\t// You can pass in a bare value or as the `value` property of an object\r\n\t\tresult = typeof result === 'object' ? result : { value: result };\r\n\t\t// Massage the result into shape\r\n\t\tresult = extend({}, defaults, result);\r\n\t\t\r\n\r\n\t\t// Transform the current value\r\n\t\tresultantArray[i] = result.value ? result.value : result;\r\n\t\t\r\n\t\t// Insert after the current element\r\n\t\tvar insertElements = [].concat(result.insertElements);\r\n\t\tif(insertElements.length > 0) {\r\n\t\t\tArray.prototype.splice.apply(resultantArray, [i+1, 0].concat(insertElements));\r\n\t\t}\r\n\r\n\t\t// Add the elements onto the end\r\n\t\tvar appendElements = [].concat(result.appendElements);\r\n\t\tif(appendElements.length > 0) {\r\n\t\t\tresultantArray = resultantArray.concat(appendElements);\r\n\t\t}\r\n\t}\r\n\r\n\treturn resultantArray;\r\n}\r\n\r\n\r\nmodule.exports = transformMap;","/home/travis/build/npmtest/node-npmtest-gulp-css-spriter/node_modules/gulp-css-spriter/lib/transform-file-with-sprite-sheet-data.js":"var path = require('path');\r\nvar extend = require('extend');\r\n\r\nvar css = require('css');\r\n\r\nvar spriterUtil = require('./spriter-util');\r\nvar mapOverStylesAndTransformBackgroundImageDeclarations = require('./map-over-styles-and-transform-background-image-declarations');\r\n\r\nvar backgroundURLMatchAllRegex = new RegExp(spriterUtil.backgroundURLRegex.source, \"gi\");\r\n\r\n\r\n// Replace all the paths that need replacing\r\nfunction transformFileWithSpriteSheetData(vinylFile, coordinateMap, pathToSpriteSheetFromCSS,  /*optional*/includeMode, /*optional*/isSilent, /*optional*/outputIndent) {\r\n\tincludeMode = includeMode ? includeMode : 'implicit';\r\n\tisSilent = (isSilent !== undefined) ? isSilent : false;\r\n\toutputIndent = outputIndent ? outputIndent : '\\t';\r\n\r\n\t// Clone the declartion to keep it immutable\r\n\tvar resultantFile = vinylFile.clone();\r\n\r\n\tif(resultantFile) {\r\n\r\n\t\tvar styles = css.parse(String(resultantFile.contents), {\r\n\t\t\t'silent': isSilent,\r\n\t\t\t'source': vinylFile.path\r\n\t\t});\r\n\r\n\t\tstyles = mapOverStylesAndTransformBackgroundImageDeclarations(styles, includeMode, function(declaration) {\r\n\r\n\t\t\tvar coordList = [];\r\n\t\t\tdeclaration.value = spriterUtil.matchBackgroundImages(declaration.value, function(imagePath) {\r\n\r\n\t\t\t\tvar coords = coordinateMap[path.join(path.dirname(resultantFile.path), imagePath)];\r\n\t\t\t\t//console.log('coords', coords);\r\n\r\n\t\t\t\t// Make sure there are coords for this image in the sprite sheet, otherwise we won't include it\r\n\t\t\t\tif(coords) {\r\n\t\t\t\t\tcoordList.push(\"-\" + coords.x + \"px -\" + coords.y + \"px\");\r\n\r\n\t\t\t\t\t// If there are coords in the spritemap for this image, lets use the spritemap\r\n\t\t\t\t\treturn pathToSpriteSheetFromCSS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn imagePath;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\t'value': declaration,\r\n\t\t\t\t/* */\r\n\t\t\t\t// Add the appropriate background position according to the spritemap\r\n\t\t\t\t'insertElements': (function() {\r\n\t\t\t\t\tif(coordList.length > 0) {\r\n\t\t\t\t\t\treturn  {\r\n\t\t\t\t\t\t\ttype: 'declaration',\r\n\t\t\t\t\t\t\tproperty: 'background-position',\r\n\t\t\t\t\t\t\tvalue: coordList.join(', ')\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t})()\r\n\t\t\t\t/* */\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t//console.log(styles.stylesheet.rules[0].declarations);\r\n\r\n\t\t// Put it back into string form\r\n\t\tvar resultantContents = css.stringify(styles, {\r\n\t\t\tindent: outputIndent\r\n\t\t});\r\n\t\t//console.log(resultantContents);\r\n\t\tresultantFile.contents = new Buffer(resultantContents);\r\n\t}\r\n\r\n\treturn resultantFile;\r\n}\r\n\r\nmodule.exports = transformFileWithSpriteSheetData;"}